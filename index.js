const TelegramBot = require("node-telegram-bot-api");
const moment = require("moment");
moment.locale("ru");

// –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
const TOKEN = "7339008763:AAHU4_ZQ1jKwdmOfSMg6WvN0VLW7MNIRHv0";
const ADMIN_CHAT_ID = -4701713936;

const bot = new TelegramBot(TOKEN, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userState = {};
const rateLimit = {};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
const seasonRates = {
  —è–Ω–≤–∞—Ä—å: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  —Ñ–µ–≤—Ä–∞–ª—å: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  –º–∞—Ä—Ç: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  –∞–ø—Ä–µ–ª—å: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  –º–∞–π: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  –∏—é–Ω—å: { "–≤—Å-—á—Ç": 14000, "–ø—Ç-—Å–±": 15000 },
  –∏—é–ª—å: { "–≤—Å-—á—Ç": 14000, "–ø—Ç-—Å–±": 15000 },
  –∞–≤–≥—É—Å—Ç: { "–≤—Å-—á—Ç": 14000, "–ø—Ç-—Å–±": 15000 },
  —Å–µ–Ω—Ç—è–±—Ä—å: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  –æ–∫—Ç—è–±—Ä—å: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  –Ω–æ—è–±—Ä—å: { "–≤—Å-—á—Ç": 11000, "–ø—Ç-—Å–±": 14000 },
  –¥–µ–∫–∞–±—Ä—å: { "–¥–æ 14": 14000, "—Å 15": 15000 },
};

const eventOptions = [
  "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤",
  "–°–≤–∞–¥—å–±–∞",
  "–í—ã–ø—É—Å–∫–Ω–æ–π",
  "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
  "–û–±—É—á–µ–Ω–∏–µ/–¢–∏–º–±–∏–ª–¥–∏–Ω–≥",
  "–î—Ä—É–≥–æ–µ",
];

const guestMultiplier = {
  "–î–æ 50": 1,
  "50-75": 1.1,
  "76-100": 1.2,
  "101-150": 1.7,
  "151-200": 2,
  "–ë–æ–ª–µ–µ 200": 2.5,
};

const locationExtra = {
  –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫: 0,
  "–ü—Ä–∏–≥–æ—Ä–æ–¥ (–¥–æ 30 –∫–º)": 5000,
  –î—Ä—É–≥–æ–µ: 1.5,
};
const budgetOptions = [
  "30-50",
  "51-75",
  "76-100",
  "101-150",
  "151-200",
  "–ë–æ–ª–µ–µ 200",
];
const bonusOptions = [
  "–î–æ–ø. —á–∞—Å –¥–∏–¥–∂–µ—è",
  "1.5 —á–∞—Å–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞",
  "1.5 —á–∞—Å–∞ —Ä–∏–ª—Å–º–µ–π–∫–µ—Ä–∞",
];

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  userState[chatId] = { step: 1, totalPrice: 15000 };

  await bot.sendMessage(
    chatId,
    "–í–∞–∂–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–∞–∂–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤–µ–¥—É—â–µ–≥–æ –∏ DJ, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç —ç—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏.\n\n(–í–µ–¥—É—â–∏–π+DJ+–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)",
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–µ—Ö–∞–ª–∏üöÇ", callback_data: "start_survey" }],
        ],
      },
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–µ—Ö–∞–ª–∏"
bot.on("callback_query", async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;

  if (callbackQuery.data === "start_survey") {
    userState[chatId] = { step: 1, baseRate: 15000 };
    await bot.sendMessage(
      chatId,
      "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —è–Ω–≤–∞—Ä—è)"
    );
  }
});

bot.on("callback_query", async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data === "skip_words") {
    userState[chatId].threeWords = "–ü—Ä–æ–ø—É—â–µ–Ω–æ";
    userState[chatId].step++;
    await askImageChoice(chatId);
  }
});

const monthNames = {
  —è–Ω–≤–∞—Ä—è: "—è–Ω–≤–∞—Ä—å",
  —Ñ–µ–≤—Ä–∞–ª—è: "—Ñ–µ–≤—Ä–∞–ª—å",
  –º–∞—Ä—Ç–∞: "–º–∞—Ä—Ç",
  –∞–ø—Ä–µ–ª—è: "–∞–ø—Ä–µ–ª—å",
  –º–∞—è: "–º–∞–π",
  –∏—é–Ω—è: "–∏—é–Ω—å",
  –∏—é–ª—è: "–∏—é–ª—å",
  –∞–≤–≥—É—Å—Ç–∞: "–∞–≤–≥—É—Å—Ç",
  —Å–µ–Ω—Ç—è–±—Ä—è: "—Å–µ–Ω—Ç—è–±—Ä—å",
  –æ–∫—Ç—è–±—Ä—è: "–æ–∫—Ç—è–±—Ä—å",
  –Ω–æ—è–±—Ä—è: "–Ω–æ—è–±—Ä—å",
  –¥–µ–∫–∞–±—Ä—è: "–¥–µ–∫–∞–±—Ä—å",
};

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  if (chatId === ADMIN_CHAT_ID) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
  if (!msg.text && !msg.contact) {
    return bot.sendMessage(
      chatId,
      "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç."
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
  if (msg.contact) {
    if (!userState[chatId]) {
      userState[chatId] = { step: 0 };
    }
    userState[chatId].phone = msg.contact.phone_number;
    userState[chatId].name = msg.contact.first_name;
    return;
  }

  if (!msg.text) return; // –ò–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ trim()
  const text = msg.text.trim();
  if (text.startsWith("/")) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å
  if (!userState[chatId] || userState[chatId].step === 0) {
    return bot.sendMessage(
      chatId,
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–ü–æ–µ—Ö–∞–ª–∏' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–µ—Ö–∞–ª–∏üöÇ", callback_data: "start_survey" }],
          ],
        },
      }
    );
  }

  const state = userState[chatId];

  console.log(`–¢–µ–∫—É—â–∏–π —à–∞–≥: ${state.step}, –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${text}`);

  switch (state.step) {
    case 1:
      const dateMatch = text.match(/^(\d{1,2})\s([–∞-—è—ë]+)$/i);
      if (!dateMatch) {
        return bot.sendMessage(chatId, "‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 15 —è–Ω–≤–∞—Ä—è");
      }

      const day = parseInt(dateMatch[1]);
      const monthInput = dateMatch[2].toLowerCase();

      state.date = `${day} ${monthInput}`;
      state.baseRate = getBaseRate(day, monthInput); // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É
      state.step++;

      await bot.sendMessage(chatId, "üéâ –ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ?", {
        reply_markup: {
          keyboard: eventOptions.map((e) => [e]),
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
      break;

    case 2:
      if (!eventOptions.includes(text)) {
        return bot.sendMessage(
          chatId,
          "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        );
      }

      state.event = text;
      state.step++;
      await bot.sendMessage(chatId, "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π", {
        reply_markup: {
          keyboard: Object.keys(guestMultiplier).map((e) => [e]),
          one_time_keyboard: true,
        },
      });
      break;

    case 3:
      if (!guestMultiplier[text]) {
        return bot.sendMessage(
          chatId,
          "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        );
      }

      state.guestCount = text;
      state.totalPrice = state.baseRate * guestMultiplier[text]; // –£–º–Ω–æ–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≥–æ—Å—Ç–µ–π
      state.step++;

      await bot.sendMessage(chatId, "üìç –ì–¥–µ –ø—Ä–æ–π–¥–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?", {
        reply_markup: {
          keyboard: Object.keys(locationExtra).map((e) => [e]),
          one_time_keyboard: true,
          resize_keyboard: true,
        },
      });
      break;

    case 4:
      if (!locationExtra.hasOwnProperty(text)) {
        return bot.sendMessage(
          chatId,
          "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        );
      }

      state.location = text;
      state.prig = 0;

      if (text === "–ü—Ä–∏–≥–æ—Ä–æ–¥ (–¥–æ 30 –∫–º)") {
        state.prig = 5000; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
      } else if (text === "–î—Ä—É–≥–æ–µ") {
        state.totalPrice *= 1.5; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
      }

      state.step++;

      await bot.sendMessage(chatId, "‚è≥ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –±—É–¥–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?");
      break;

    case 5:
      const hours = parseInt(text);
      if (isNaN(hours) || hours <= 0) {
        return bot.sendMessage(chatId, "‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ.");
      }

      state.hours = hours;
      state.totalPrice *= state.hours; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
      state.step++;

      await bot.sendMessage(
        chatId,
        "üí∞ –ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–µ—Ç—Å—è –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ –¢–ó? (—Ç—ã—Å.‚ÇΩ)",
        {
          reply_markup: {
            keyboard: budgetOptions.map((e) => [e]),
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        }
      );
      break;

    case 6:
      if (!budgetOptions.includes(text)) {
        return bot.sendMessage(
          chatId,
          "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        );
      }

      state.budget = text;
      state.step++;
      await bot.sendMessage(
        chatId,
        "üîÆ –ö–∞–∫–∏–º–∏ 3 —Å–ª–æ–≤–∞–º–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip_words" }],
            ],
          },
        }
      );
      break;

    case 7:
      const words = text.split(/\s+/);
      if (words.length !== 3) {
        return bot.sendMessage(
          chatId,
          "‚ùó –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ —Ç—Ä–∏ —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º."
        );
      }

      state.threeWords = text;
      state.step++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º askImageChoice

      await askImageChoice(chatId); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
      break;

    case 8:
      await handleImageChoice(chatId, text);
      break;

    case 9:
      if (!bonusOptions.includes(text)) {
        return bot.sendMessage(
          chatId,
          "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤."
        );
      }

      state.bonus = text;
      state.step++;

      await bot.sendMessage(
        chatId,
        `‚úÖ –í–∞—à –±–æ–Ω—É—Å —É—á—Ç–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n\n‚úÖ –í–∞—à–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${
          state.totalPrice + state.prig
        }‚ÇΩ\n–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å–º–µ—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–°–≤—è–∂–∏—Ç–µ –º–µ–Ω—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º",
                  callback_data: "contact_me",
                },
              ],
              [
                {
                  text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                  callback_data: "package_offers",
                },
              ],
            ],
          },
        }
      );
      await sendAdminSummary(msg);
      break;

    case 10:
      const packageImages = {
        –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤: ["./images/corporate1.jpg"],
        –í—ã–ø—É—Å–∫–Ω–æ–π: ["./images/graduation1.jpg", "./images/graduation2.jpg"],
        "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": ["./images/birthday1.jpg"],
        –°–≤–∞–¥—å–±–∞: ["./images/wedding1.jpg", "./images/wedding2.jpg"],
      };

      if (!packageImages[text]) {
        return bot.sendMessage(
          chatId,
          "‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        );
      }

      state.package = text;

      for (const image of packageImages[text]) {
        await bot.sendPhoto(chatId, image);
      }

      await bot.sendMessage(chatId, "üîπ –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–°–≤—è–∂–∏—Ç–µ –º–µ–Ω—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º", callback_data: "contact_me" }],
            [
              {
                text: "–î—Ä—É–≥–∏–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                callback_data: "package_offers",
              },
            ],
          ],
        },
      });
      break;
  }
});

function getBaseRate(day, monthInput) {
  const month = monthInput.toLowerCase();
  if (!seasonRates[month]) return 15000; // –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É

  if (month === "–¥–µ–∫–∞–±—Ä—å") {
    return day < 15 ? seasonRates[month]["–¥–æ 14"] : seasonRates[month]["—Å 15"];
  }

  const dateString = `${day} ${month} 2024`; // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
  const weekday = moment(dateString, "D MMMM YYYY").isoWeekday();

  return weekday < 5
    ? seasonRates[month]["–≤—Å-—á—Ç"]
    : seasonRates[month]["–ø—Ç-—Å–±"];
}

// –í—ã–±–æ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏
async function askImageChoice(chatId) {
  userState[chatId].step = 8;

  const images = [
    {
      url: "https://vel-agency.sps.center/wp-content/uploads/2024/10/card_quiz_4_vel-e1740539781897.png",
      caption: "–î–µ–≤—É—à–∫–∞ —Å —Å–∏–Ω–∏–º–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏ (–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–µ–≤–∞)",
      title: "–î–µ–≤—É—à–∫–∞ —Å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏ (–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–µ–≤–∞)",
    },
    {
      url: "https://vel-agency.sps.center/wp-content/uploads/2024/10/card_quiz_3_vel-e1740539861115.png",
      caption: "–£—é—Ç–Ω–∞—è —Å–ø–∞–ª—å–Ω—è —Å –∂—ë–ª—Ç—ã–º–∏ —à—Ç–æ—Ä–∞–º–∏ (–≤–µ—Ä—Ö–Ω—è—è —Å–ø—Ä–∞–≤–∞)",
      title: "–£—é—Ç–Ω–∞—è —Å–ø–∞–ª—å–Ω—è (–≤–µ—Ä—Ö–Ω—è—è —Å–ø—Ä–∞–≤–∞)",
    },
    {
      url: "https://vel-agency.sps.center/wp-content/uploads/2024/10/card_quiz_2_vel-e1740539841526.png",
      caption: "–ó–µ–ª—ë–Ω—ã–µ –ª–∏—Å—Ç—å—è –≤–±–ª–∏–∑–∏ (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–ø—Ä–∞–≤–∞)",
      title: "–ó–µ–ª—ë–Ω—ã–µ –ª–∏—Å—Ç—å—è (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–ø—Ä–∞–≤–∞)",
    },
    {
      url: "https://vel-agency.sps.center/wp-content/uploads/2024/10/card_quiz_1_vel.png",
      caption: "–ñ–µ–Ω—â–∏–Ω–∞ –≤ —Ä–æ—Å–∫–æ—à–Ω–æ–º –æ–±—Ä–∞–∑–µ —Å —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏ (–Ω–∏–∂–Ω—è—è —Å–ø—Ä–∞–≤–∞)",
      title: "–ñ–µ–Ω—â–∏–Ω–∞ —Å —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏ (–Ω–∏–∂–Ω—è—è —Å–ø—Ä–∞–≤–∞)",
    },
  ];

  try {
    console.log("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã...");

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    await bot.sendMediaGroup(
      chatId,
      images.map((img) => ({
        type: "photo",
        media: img.url,
        caption: img.caption,
        parse_mode: "Markdown",
      }))
    );

    console.log("‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");

    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await new Promise((resolve) => setTimeout(resolve, 1000));

    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è:", {
      reply_markup: {
        keyboard: images.map((img) => [img.title]), // –ö–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        one_time_keyboard: true,
        resize_keyboard: true,
      },
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã:", error);
    await bot.sendMessage(
      chatId,
      "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
}

async function handleImageChoice(chatId, text) {
  const imageOptions = {
    "–î–µ–≤—É—à–∫–∞ —Å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏ (–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–µ–≤–∞)": "–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–µ–≤–∞",
    "–£—é—Ç–Ω–∞—è —Å–ø–∞–ª—å–Ω—è (–≤–µ—Ä—Ö–Ω—è—è —Å–ø—Ä–∞–≤–∞)": "–≤–µ—Ä—Ö–Ω—è—è —Å–ø—Ä–∞–≤–∞",
    "–ó–µ–ª—ë–Ω—ã–µ –ª–∏—Å—Ç—å—è (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–ø—Ä–∞–≤–∞)": "–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–ø—Ä–∞–≤–∞",
    "–ñ–µ–Ω—â–∏–Ω–∞ —Å —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏ (–Ω–∏–∂–Ω—è—è —Å–ø—Ä–∞–≤–∞)": "–Ω–∏–∂–Ω—è—è —Å–ø—Ä–∞–≤–∞",
  };

  if (!imageOptions.hasOwnProperty(text)) {
    return bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.");
  }

  userState[chatId].imageChoice = `${text} (${imageOptions[text]})`;
  userState[chatId].step++;

  await askBonus(chatId);
}

// –í—ã–±–æ—Ä –±–æ–Ω—É—Å–∞
async function askBonus(chatId) {
  userState[chatId].step = 9;
  await bot.sendMessage(
    chatId,
    `–õ—é–±–ª—é –¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏, –ø–æ—ç—Ç–æ–º—É –≤ —Å–ª—É—á–∞–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫, –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—åüéÅ:\n1). –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å —Ä–∞–±–æ—Ç—ã –¥–∏–¥–∂–µ—è;\n2). 1.5 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞;\n3). 1.5 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã —Ä–∏–ª—Å–º–µ–π–∫–µ—Ä–∞ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ).`,
    {
      reply_markup: {
        keyboard: bonusOptions.map((e) => [e]),
        one_time_keyboard: true,
      },
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on("contact", async (msg) => {
  const chatId = msg.chat.id;

  if (!userState[chatId]) {
    userState[chatId] = {};
  }

  userState[chatId].phone = msg.contact.phone_number;
  userState[chatId].name = msg.contact.first_name;

  await bot.sendMessage(
    ADMIN_CHAT_ID,
    `üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: ${userState[chatId].name} (${userState[chatId].phone})`
  );

  await bot.sendMessage(chatId, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
});

async function sendAdminSummary(msg) {
  const state = userState[msg.chat.id];

  if (!state) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
    return;
  }

  const summaryMessage = `
üì© *–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å*\n
üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: @${msg.chat.username ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n
üìÖ *–î–∞—Ç–∞*: ${state.date || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n
üéâ *–°–æ–±—ã—Ç–∏–µ*: ${state.event || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n
üë• *–ì–æ—Å—Ç–∏*: ${state.guestCount || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n
üìç *–õ–æ–∫–∞—Ü–∏—è*: ${state.location || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n
‚è≥ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*: ${state.hours || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} —á.\n
üí∞ *–û–∂–∏–¥–∞–Ω–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É*: ${state.budget || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} —Ç—ã—Å. ‚ÇΩ\n
üîÆ *3 —Å–ª–æ–≤–∞ –ø—Ä–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ*: ${state.threeWords || "–ü—Ä–æ–ø—É—â–µ–Ω–æ"}\n
üñº *–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å*: ${state.imageChoice || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"}\n
üéÅ *–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å*: ${state.bonus || "–ù–µ –≤—ã–±—Ä–∞–Ω"}\n
üíµ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å*: ${
    state.totalPrice ? state.totalPrice + (state.prig || 0) : "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
  }‚ÇΩ
`;

  await bot.sendMessage(ADMIN_CHAT_ID, summaryMessage, {
    parse_mode: "Markdown",
  });
}

bot.on("callback_query", async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data === "package_offers") {
    await askPackageOffer(chatId);
  }
});

bot.on("callback_query", async (callbackQuery) => {
  try {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (!userState[chatId]) {
      userState[chatId] = { step: 0 };
    }

    if (data === "contact_me") {
      if (!userState[chatId].phone) {
        await askForContact(chatId);
        return;
      }

      userState[chatId].contactRequested = true;

      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
      await sendAdminSummary({
        chat: {
          id: chatId,
          username: callbackQuery.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
        },
      });

      await bot.sendMessage(chatId, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
    } else if (data === "package_offers") {
      await askPackageOffer(chatId);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:", error);
    await bot.sendMessage(
      callbackQuery.message.chat.id,
      "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."
    );
  }
});

// –í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
async function askPackageOffer(chatId) {
  if (!userState[chatId]) {
    userState[chatId] = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  }
  userState[chatId].step = 10;

  await bot.sendMessage(
    chatId,
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –ø–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
    {
      reply_markup: {
        keyboard: [
          ["–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤"],
          ["–í—ã–ø—É—Å–∫–Ω–æ–π"],
          ["–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"],
          ["–°–≤–∞–¥—å–±–∞"],
        ],
        one_time_keyboard: true,
      },
    }
  );
}

function isRateLimited(chatId) {
  const now = Date.now();
  if (rateLimit[chatId] && now - rateLimit[chatId] < 60000) {
    return true;
  }
  rateLimit[chatId] = now;
  return false;
}

bot.onText(/\/survey/, async (msg) => {
  const chatId = msg.chat.id;
  if (isRateLimited(chatId)) {
    return bot.sendMessage(
      chatId,
      "‚õî –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º –æ–ø—Ä–æ—Å–∞."
    );
  }

  userState[chatId] = { step: 1 }; // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
  await bot.sendMessage(
    chatId,
    "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —è–Ω–≤–∞—Ä—è)"
  );
});

async function askForContact(chatId) {
  await bot.sendMessage(
    chatId,
    "üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
    {
      reply_markup: {
        keyboard: [[{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä üìû", request_contact: true }]],
        one_time_keyboard: true,
        resize_keyboard: true,
      },
    }
  );
}

async function checkUserContact(chatId) {
  try {
    const user = await bot.getChat(chatId);

    let contactInfo = "";

    if (user.username) {
      contactInfo = `@${user.username}`;
    } else if (user.first_name) {
      contactInfo = `${user.first_name} ${user.last_name || ""}`.trim();
    } else {
      contactInfo = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    }

    return contactInfo;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö";
  }
}

function getSeasonRate(day, monthInput) {
  const monthNames = {
    —è–Ω–≤–∞—Ä—å: "—è–Ω–≤–∞—Ä—å",
    —Ñ–µ–≤—Ä–∞–ª—å: "—Ñ–µ–≤—Ä–∞–ª—å",
    –º–∞—Ä—Ç: "–º–∞—Ä—Ç",
    –∞–ø—Ä–µ–ª—å: "–∞–ø—Ä–µ–ª—å",
    –º–∞–π: "–º–∞–π",
    –∏—é–Ω—å: "–∏—é–Ω—å",
    –∏—é–ª—å: "–∏—é–ª—å",
    –∞–≤–≥—É—Å—Ç: "–∞–≤–≥—É—Å—Ç",
    —Å–µ–Ω—Ç—è–±—Ä—å: "—Å–µ–Ω—Ç—è–±—Ä—å",
    –æ–∫—Ç—è–±—Ä—å: "–æ–∫—Ç—è–±—Ä—å",
    –Ω–æ—è–±—Ä—å: "–Ω–æ—è–±—Ä—å",
    –¥–µ–∫–∞–±—Ä—å: "–¥–µ–∫–∞–±—Ä—å",
  };

  const month = monthInput.toLowerCase();
  if (!monthNames[month]) return null;

  if (month === "–¥–µ–∫–∞–±—Ä—å") {
    return day < 15 ? seasonRates[month]["–¥–æ 14"] : seasonRates[month]["—Å 15"];
  }

  const dateString = `${day} ${month} 2024`; // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
  const weekday = moment(dateString, "D MMMM YYYY").isoWeekday();

  return weekday < 5
    ? seasonRates[month]["–≤—Å-—á—Ç"]
    : seasonRates[month]["–ø—Ç-—Å–±"];
}
