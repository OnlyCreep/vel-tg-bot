const TelegramBot = require("node-telegram-bot-api");
const token = "7339008763:AAHU4_ZQ1jKwdmOfSMg6WvN0VLW7MNIRHv0";
const bot = new TelegramBot(token, { polling: true });

const adminChatId = 1032236389;

const guestOptions = ["–î–æ 50", "50-75", "76-100", "101-150", "151-200", "–ë–æ–ª–µ–µ 200"];
const eventOptions = ["–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "–°–≤–∞–¥—å–±–∞", "–í—ã–ø—É—Å–∫–Ω–æ–π", "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–û–±—É—á–µ–Ω–∏–µ/–¢–∏–º–±–∏–ª–¥–∏–Ω–≥", "–î—Ä—É–≥–æ–µ"];
const locationOptions = ["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ü—Ä–∏–≥–æ—Ä–æ–¥ (–¥–æ 30 –∫–º)", "–î—Ä—É–≥–æ–µ"];
const budgetOptions = ["30-50", "51-75", "76-100", "101-150", "151-200", "–ë–æ–ª–µ–µ 200"];

const guestMultiplier = {
  "–î–æ 50": 1,
  "50-75": 1.1,
  "76-100": 1.2,
  "101-150": 1.7,
  "151-200": 2,
  "–ë–æ–ª–µ–µ 200": 2.5,
};

const locationExtra = {
  "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": 0,
  "–ü—Ä–∏–≥–æ—Ä–æ–¥ (–¥–æ 30 –∫–º)": 5000,
  "–î—Ä—É–≥–æ–µ": 1.5,
};

let userSessions = {};
let lastSurveyTime = {};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "–í–∞–∂–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–∞–∂–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤–µ–¥—É—â–µ–≥–æ –∏ DJ, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç —ç—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏.\n\n(–í–µ–¥—É—â–∏–π+DJ+–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)"
  );
});

bot.onText(/\/survey/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
  const now = Date.now();

  if (lastSurveyTime[userId] && now - lastSurveyTime[userId] < 60000) {
    return bot.sendMessage(chatId, "‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º –æ–ø—Ä–æ—Å–∞.");
  }

  lastSurveyTime[userId] = now;

  if (userSessions[chatId]) {
    bot.sendMessage(adminChatId, `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} (ID: ${userId}) –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –æ–ø—Ä–æ—Å.`);
  }

  userSessions[chatId] = { userId, username };
  askDate(chatId);
});

function askDate(chatId) {
  bot.sendMessage(chatId, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", {
    reply_markup: { force_reply: true },
  });
}

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  if (!userSessions[chatId]) return;

  const session = userSessions[chatId];
  const text = msg.text;

  if (!session.date) {
    session.date = text;
    askEvent(chatId);
  } else if (!session.event) {
    if (!eventOptions.includes(text)) return askEvent(chatId, true);
    session.event = text;
    askGuests(chatId);
  } else if (!session.guests) {
    if (!guestOptions.includes(text)) return askGuests(chatId, true);
    session.guests = text;
    askLocation(chatId);
  } else if (!session.location) {
    if (!locationOptions.includes(text)) return askLocation(chatId, true);
    session.location = text;
    askHours(chatId);
  } else if (!session.hours) {
    if (isNaN(text) || parseInt(text) <= 0) return bot.sendMessage(chatId, "‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ü–∏—Ñ—Ä–∞–º–∏!");
    session.hours = parseInt(text);
    askBudget(chatId);
  } else if (!session.budget) {
    if (!budgetOptions.includes(text)) return askBudget(chatId, true);
    session.budget = text;
    askWords(chatId);
  } else if (!session.words) {
    session.words = text;
    sendSummary(chatId);
  }
});
